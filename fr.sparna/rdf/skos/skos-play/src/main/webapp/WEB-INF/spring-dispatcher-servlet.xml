<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- Load skosplay-application.properties -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	  <property name="locations">
	    <list>
	        <value>file://#{systemProperties['skosplay.home']}/conf/skosplay-application.properties</value>
	        <value>classpath:skosplay-application.properties</value>
	        <!-- Load version.properties from the classpath -->
	        <value>classpath:version.properties</value>
	    </list>
	  </property>
	  <property name="properties">  
		<props>  
		   <prop key="project.version">project.version</prop>
		   <prop key="timestamp">timestamp</prop>  
		</props>  
	  </property>
	  <property name="ignoreResourceNotFound" value="true" />
	</bean>

    <!-- scan les annotations pour trouver notamment @Controller et @Autowired -->
    <context:component-scan base-package="fr.sparna.rdf.skosplay"/>
    
    <!-- Map toutes les URLs qui ne sont pas mappées vers des méthodes vers des fichiers statiques -->
    <mvc:default-servlet-handler/>
	<mvc:annotation-driven />

	<!-- 	Resolves the view names to JSP in the /WEB-INF/jsp/ folder 
			(eg. if Controller returns view name "edit", the jsp /WEB-INF/jsp/edit.jsp will ba called)
	-->
	<bean	id="viewResolver"
			class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
    	<property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!-- For file upload -->
    <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    </bean>
    
<!--     <mvc:interceptors> -->
<!-- 		<bean class="org.springframework.web.servlet.mvc.WebContentInterceptor" p:cacheSeconds="86400" p:alwaysUseFullPath="true" > -->
<!-- 		    <property name="cacheMappings"> -->
<!-- 		        <props> -->
<!-- 		            cache for one month -->
<!-- 		            <prop key="/cache/me/**">2592000</prop> -->
<!-- 		        </props> -->
<!-- 		    </property> -->
<!-- 		</bean> -->
<!-- 	</mvc:interceptors> -->

    <mvc:interceptors>
		<bean class="org.springframework.web.servlet.mvc.WebContentInterceptor" p:alwaysUseFullPath="true" >
		    <property name="cacheMappings">
		        <props>
					<!-- cache for one month -->
		            <prop key="/cache/me/**">2592000</prop>
		        </props>
		    </property>
		</bean>
	</mvc:interceptors>
    
    <!-- Application Config singleton. Factory-method gets the instance via the singleton method -->
	<!-- The bean is autowired and configured with @Value annotations -->
	<bean id="skosPlayConfig" class="fr.sparna.rdf.skosplay.SkosPlayConfig" factory-method="getInstance" />
	
	<bean id="sqlLogDao" class="fr.sparna.rdf.skosplay.log.SQLLogDao">
		<constructor-arg name="doLog" value="${skosplay.log:false}" />
		<constructor-arg name="connectionManager">
			<bean id="dbConnectionManager" class="fr.sparna.rdf.skosplay.log.DBConnectionManager">
				<constructor-arg name="dataPath" value="#{systemProperties['skosplay.home']}/db/skos-play-db" />
			</bean>
		</constructor-arg>	
	</bean>
	
	<bean id="dbConnectionManager" class="fr.sparna.rdf.skosplay.log.DBConnectionManager">
				<constructor-arg name="dataPath" value="#{systemProperties['skosplay.home']}/db/skos-play-db" />
	</bean>
	<bean id="applicationData" class="fr.sparna.rdf.skosplay.ApplicationData">
		<constructor-arg name="thesaurusDirectory" value="${skosplay.thesaurus.directory:@null}" />		
		<property name="buildVersion" value="${build.version:unknown}" />
		<property name="buildTimestamp" value="${build.timestamp:unknown}" />
	</bean>
	
	<!-- Register applicationData in the ServletContext, so that it is accessible in JSP JSTL -->
	<bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
        <property name="attributes">
            <map>
                <entry key="applicationData" value-ref="applicationData" />
            </map>
        </property>
    </bean>
    
    <bean id="sqlQueryRegistry" class="fr.sparna.rdf.skosplay.log.SQLQueryRegistry">
		<constructor-arg name="queriesById">
			<map>
                <entry key="NumberConvertOrPrintPerDayMonthYear">
		                <value>
		                	select jours.periode, nbreconvert, nbreprint 
		                	from( select distinct _METH_ (jour) as periode from statistique  _LIM_ ) as jours 
		                		left outer join( 
		                			select count(id) as nbreconvert, _METH_ (jour) as laperiode from statistique where type='convert' group by laperiode 
		                		)as convert 
		                		on jours.periode = convert.laperiode  
		                		left outer join( 
		                			select count(id) as nbreprint, _METH_(jour) as laperiode from statistique where type='print' group by laperiode 
		                		) as print 
		                		on jours.periode=print.laperiode 
		                		order by jours.periode ;
		                </value>
                </entry>
                <entry key="NumberOfFormat">
		                <value>
		                	select distinct output, count(id) as nombre from statistique where output _diff_ 'null' group by output order by nombre desc;
		                </value>
                </entry>
                <entry key="NumberOfConvertLanguage">
		                <value>
		                	select distinct langue, count(id) as nombre from statistique where type='convert' group by langue order by nombre desc;
		                </value>
                </entry>
                <entry key="NumberOfPrintLanguage">
		                <value>
		                	select distinct langue, count(id) as nombre from statistique where type='print'  group by langue order by nombre desc;
		                </value>
                </entry>
                <entry key="NumberOfRendu">
		                <value>
		                	select distinct rendu, count(id) as nombre from statistique where rendu _diff_ 'null' group by rendu order by nombre desc;
		                </value>
                </entry>
                <entry key="Allprintconvert">
		                <value>
		                	select type, count(id) as nombre from statistique group by type;
		                </value>
                </entry>
                <entry key="printConvertLast365Days">
		                <!-- select type, count(id) as nbre, year(JOUR) as periode  from statistique where year(JOUR)=(SELECT (year(jour)-1) as year from statistique order by year(jour) desc limit 0, 1) group by type, year(JOUR); -->
		                <!-- 
		                		On veut les statistiques sur les derniers 365 jours - et pas sur la derniere année. Les calculs sur les dates semblent marcher avec
		                		les jours, voir http://h2-database.66688.n3.nabble.com/Using-arithmetic-with-sysdate-td2088872.html
		                 -->
		                <value>
		                	select type, count(id) as nbre from statistique where JOUR > (NOW() - 365) group by type order by nbre desc;
		                </value>
                </entry>
                
                <entry key="UrlsConvertis">
		                <value>
		                	 select distinct url, count(id) as nombre from statistique where type='convert' and  url &lt;&gt;'null'  _DAY_  group by url order by nombre desc;   
		                </value>
                </entry>
                <entry key="UrlsPrint">
		                <value>
		                	select distinct url, count(id) as nombre from statistique where type='print' and  url &lt;&gt;'null'  _DAY_  group by url order by nombre desc; 
		                </value>
                </entry>
                <entry key="IdConvertis">
		                <value>
		                	 select distinct uri, count(id) as nombre from statistique where type='convert' and  uri  &lt;&gt;'null'  _DAY_  group by uri order by nombre desc LIMIT 10 offset _OFFSET_;  
		                </value>
                </entry>
                
                <entry key="IdConvertisTotaux">
		                <value>
		        
							 select count(uri) as nombre from
		                	 (select distinct uri, count(id) as nombre from statistique where type='convert' and   uri  &lt;&gt;'null' _DAY_  group by uri);   
		                </value>
                </entry>
               
                <entry key="IdPrintTotaux">
		                <value>
		                select count(uri) as nombre from
		                	 (select distinct uri, count(id) as nombre from statistique where type='print' and  uri &lt;&gt;'null' _DAY_  group by uri) ;  
		                </value>
                </entry>
             
                <entry key="IdPrint">
		                <value>
		                	select distinct uri, count(id) as nombre from statistique where type='print' and  uri  &lt;&gt;'null'  _DAY_  group by uri order by nombre desc LIMIT 10 offset _OFFSET_; 
		                </value>
                </entry>
            </map>
		</constructor-arg>		
	</bean>

</beans>
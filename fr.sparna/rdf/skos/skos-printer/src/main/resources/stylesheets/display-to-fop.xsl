<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet 
	version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:disp="http://www.sparna.fr/thesaurus-display"
	xmlns:fo="http://www.w3.org/1999/XSL/Format">
	
	<xsl:template match="/">
		<xsl:apply-templates select="disp:kosDocument" />
	</xsl:template>
	
	<xsl:template match="disp:kosDocument">
		<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
		
			<fo:layout-master-set>
				<xsl:apply-templates select="disp:body/disp:kosDisplay" mode="layout-master-set" />
			</fo:layout-master-set>

			<!-- the first display will print the header -->		
			<xsl:apply-templates select="disp:body" />
		
		</fo:root>
	</xsl:template>
	
	<!-- generates a different page master for each display, to have different column-count for each of them -->
	<!-- the master-name is generated based on the display node ID, so that it can be referenced later. -->
	<xsl:template match="disp:kosDisplay" mode="layout-master-set">
		<fo:simple-page-master
	  		master-name="pageMaster-{generate-id()}"
	  		page-width="210mm"
			page-height="297mm"
			margin-top="2cm"
			margin-bottom="1cm"
			margin-left="2cm"
			margin-right="2cm">
			<!-- see http://stackoverflow.com/questions/14347094/xslt-if-attribute-exists-else -->
			<!--
				le truc ci-dessous est un "if exists" : on concat '1' (la valeur par défaut), avec ce qu'il y a potentiellement
				dans l'attribut, puis on prend la substring de ça, soit en commençant à 1 (le premier caractère) s'il n'y avait
				rien dans l'attribut, soit en commencant au second caractere s'il y avait qq chose dans l'attribut.
			-->
			<fo:region-body column-count="{substring(concat('1', @column-count), 1 + (1 * boolean(@column-count)))}" column-gap="5pt" margin-bottom="1cm" />
			<fo:region-before extent="1cm" />
			<fo:region-after extent="1cm" />
			<fo:region-start extent="1cm" />
			<fo:region-end extent="1cm" />
		</fo:simple-page-master>
	</xsl:template>
	
	<!-- Display header -->
	<xsl:template match="disp:header">
		<!-- avoid empty headers if there is nothing to display -->
		<xsl:if test="*">
			<fo:block 
	  			padding-before="1em" 
	  			padding-after="1em"
	  			padding-start="1em"
	  			margin-bottom="1em"
	  			font-family="sans-serif"
	  			span="all"
	  			border-before-style="outset"
	  			border-after-style="outset"
	  			border-start-style="outset"
	  			border-end-style="outset"
	  		>
	  			<fo:block font-size="16pt"><xsl:value-of select="disp:title" /></fo:block>
	  			<xsl:apply-templates select="disp:creator" />
	  			<xsl:apply-templates select="disp:date" />
				<xsl:apply-templates select="disp:version" />
				<xsl:apply-templates select="disp:description" />
	  		</fo:block>
  		</xsl:if>
	</xsl:template>
	<xsl:template match="disp:creator | disp:date | disp:version | disp:description">
		<fo:block margin-left="10pt" font-size="10pt"><xsl:value-of select="." /></fo:block>
	</xsl:template>

	<!-- Document body -->
	<xsl:template match="disp:body">
		<!-- generates automatic summary, etc. ? -->
		<!-- process kosDisplays -->
		<xsl:apply-templates />
	</xsl:template>


	<!-- A KOS Display -->
	<xsl:template match="disp:kosDisplay">
		<fo:page-sequence master-reference="pageMaster-{generate-id()}">
		
			<!-- adds page number but this does not work, it overlaps with the text -->
			<!--
			<fo:static-content flow-name="xsl-region-after">
		      <fo:block font-size="10pt" 
		                font-family="sans-serif" 
		                text-align="end"><fo:page-number/></fo:block>
			</fo:static-content>
			-->
			
			<fo:static-content flow-name="xsl-region-after">
				 <xsl:call-template name="footer"/>
			</fo:static-content>
		
			<fo:flow flow-name="xsl-region-body">
				<!-- Print the header if this is the first kosDisplay -->
				<xsl:if test="position() = 1">
					<xsl:apply-templates select="../../disp:header" />
				</xsl:if>
				
				<!-- print sections -->
				<xsl:apply-templates />
			</fo:flow>
  				
		</fo:page-sequence>		
	</xsl:template>	
		
	<xsl:template name="footer">
		<fo:block font-size="7pt" text-align="outside">
			<fo:page-number/> - <fo:inline font-style="italic">Generated by SKOS Play!, sparna.fr</fo:inline>
		</fo:block>
	</xsl:template>
	
	<!-- Process a section -->
	<xsl:template match="disp:section">
		<fo:block page-break-after="always">
			<xsl:if test="@title">
				<fo:block
					margin-top="9pt"
					margin-bottom="9pt"
					font-size="125%"
					text-align="center"
					font-weight="bold">
					<xsl:value-of select="@title" />
				</fo:block>
			</xsl:if>
			<xsl:apply-templates />
		</fo:block>
	</xsl:template>

	<!-- Display a list -->
	<xsl:template match="disp:list">
		<fo:block font-size="90%">
			<xsl:for-each select="disp:listItem">
				<fo:block margin-top="9pt">
					<xsl:apply-templates select="disp:conceptBlock" />
				</fo:block>
			</xsl:for-each>
		</fo:block>
	</xsl:template>
	
	<!-- Display a tree -->
	<xsl:template match="disp:tree">
		<fo:block font-size="80%">
			<xsl:apply-templates select="disp:node" />
		</fo:block>
	</xsl:template>
	
	<!-- process a tree node -->
	<xsl:template match="disp:node">
		<fo:block>
			<!-- print indentation and non-breaking space if we are at least one level deep -->
			<xsl:for-each select="ancestor::disp:node">...</xsl:for-each>
			<xsl:if test="ancestor::disp:node">&#160;</xsl:if>
			
			<!-- print its conceptBlock data -->
			<xsl:apply-templates select="disp:nodeData/disp:conceptBlock/disp:label" />	
			
			<!-- recurse -->
			<xsl:apply-templates select="disp:node" />
		</fo:block>
	</xsl:template>

	<!-- Display a table -->
	<xsl:template match="disp:table">
		<fo:block font-size="smaller">
			<fo:table>
				<fo:table-column column-width="50%"/>
				<fo:table-column column-width="50%"/>
				<xsl:apply-templates select="disp:tableHeader" />
				<fo:table-body>
					<xsl:for-each select="disp:row">
						<fo:table-row>
							<xsl:for-each select="disp:cell">
								<fo:table-cell>
									<fo:block>
										<xsl:apply-templates />
									</fo:block>
								</fo:table-cell>
							</xsl:for-each>
						</fo:table-row>
					</xsl:for-each>
				</fo:table-body>
			</fo:table>
		</fo:block>
	</xsl:template>
	
	<xsl:template match="disp:tableHeader">
		<fo:table-header>
			<fo:table-row>
				<xsl:for-each select="disp:cell">
				<fo:table-cell>
					<fo:block text-align="center" font-weight="bold">
						<xsl:apply-templates />
					</fo:block>
				</fo:table-cell>
				</xsl:for-each>
			</fo:table-row>
		</fo:table-header>
	</xsl:template>


	<!-- display a concept block -->
	<xsl:template match="disp:conceptBlock">
		<!-- sets the id on the FO element, to be referenced in internal links -->
		<fo:block id="{@id}">
			<xsl:apply-templates select="disp:label" />
			
			<xsl:if test="disp:att">
				<fo:block margin-left="12pt">
					<xsl:apply-templates select="disp:att" />
				</fo:block>
			</xsl:if>
		</fo:block>
	</xsl:template>

	<xsl:template match="disp:label">
		<xsl:apply-templates />
	</xsl:template>
	
	<xsl:template match="disp:att">
		<fo:block font-size="smaller"><xsl:value-of select="@type" /> : <xsl:apply-templates /></fo:block>
	</xsl:template>
	
	<xsl:template match="disp:link">
        <fo:basic-link internal-destination="{@refId}">
          <xsl:call-template name="styledString" />
        </fo:basic-link>
	</xsl:template>

	<xsl:template match="disp:str">
		<xsl:call-template name="styledString" />
	</xsl:template>
	
	<xsl:template name="styledString">
		<xsl:choose>
			<xsl:when test="@style = 'pref'">
				<fo:inline font-weight="bold"><xsl:value-of select="text()" /></fo:inline>
			</xsl:when>
			<xsl:when test="@style = 'alt'">
				<fo:inline font-style="italic"><xsl:value-of select="text()" /></fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline><xsl:value-of select="text()" /></fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
</xsl:stylesheet>